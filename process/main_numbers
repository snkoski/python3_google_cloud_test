import os

from flask import Flask, render_template, jsonify
import sqlalchemy
from flask_sqlalchemy import SQLAlchemy
from flask_marshmallow import Marshmallow, pprint

db_user = os.environ.get('CLOUD_SQL_USERNAME')
db_password = os.environ.get('CLOUD_SQL_PASSWORD')
db_name = os.environ.get('CLOUD_SQL_DATABASE_NAME')
db_connection_name = os.environ.get('CLOUD_SQL_CONNECTION_NAME')

# When deployed to App Engine, the `GAE_ENV` environment variable will be
# set to `standard`
def get_connection():
    if os.environ.get('GAE_ENV') == 'standard':
        # If deployed, use the local socket interface for accessing Cloud SQL
        unix_socket = '/cloudsql/{}'.format(db_connection_name)
        engine_url = 'mysql+pymysql://{}:{}@/{}?unix_socket={}'.format(
            db_user, db_password, db_name, unix_socket)
        return engine_url
    else:
        # If running locally, use the TCP connections instead
        # Set up Cloud SQL Proxy (cloud.google.com/sql/docs/mysql/sql-proxy)
        # so that your application can use 127.0.0.1:3306 to connect to your
        # Cloud SQL instance
        host = '127.0.0.1'
        engine_url = 'mysql+pymysql://{}:{}@{}/{}'.format(
            db_user, db_password, host, db_name)
        return engine_url

    # The Engine object returned by create_engine() has a QueuePool integrated
    # See https://docs.sqlalchemy.org/en/latest/core/pooling.html for more
    # information


    # engine = sqlalchemy.create_engine(engine_url, pool_size=3)

app = Flask(__name__)
url = get_connection()
app.config['SQLALCHEMY_DATABASE_URI'] = url
db = SQLAlchemy(app)
ma = Marshmallow(app)

class Dog(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(255))

    # def __init__(self, name):
    #     self.name = name

class Numbers(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    original = db.Column(db.Integer)
    modified = db.Column(db.Integer)
    random = db.Column(db.Float)

    def __init__(self, original, modified, random):
        self.original = original
        self.modified = modified
        self.random = random

class Users(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    fname = db.Column(db.String(255))
    lname = db.Column(db.String(255))
    email = db.Column(db.String(255))

# class DogSchema(ma.Schema):
#     class Meta:
#         fields = ('name')

class NumbersSchema(ma.Schema):
    class Meta:
        fields = ('original', 'modified', 'random')
    # id = fields.Integer
    # original = fields.Integer
    # modified = fields.Integer
    # random = fields.Float

number_schema = NumbersSchema()
numbers_schema= NumbersSchema(many=True)
# dog_schema = DogSchema()
# dogs_schema = DogSchema(many=True)


@app.route('/')
def main():
    return '<h1>HELLO WORLD!</h1>'

@app.route('/numbers', methods=['GET'])
def get_numbers():
    all_numbers = Numbers.query.all()
    result = numbers_schema.dump(all_numbers)
    # return render_template('numbers.html', result=result)
    # return jsonify(result.data)
    return "GET ALL NUMBERS"

@app.route('/numbers/<id>', methods=['GET'])
def number_detail(id):
    number = Numbers.query.get(id)
    return number_schema.jsonify(number)

@app.route('/numbers', methods=['POST'])
def add_number():

    data = request.get_json()
    if not data:
        return{'message' : 'No input data provided'}, 400

    original = data['original']
    modified = data['modified']
    random = data['random']

    new_number = Numbers(original, modified, random)

    db.session.add(new_number)
    db.session.commit()

    result = number_schema.dump(new_number).data

    return { 'status' : 'success', 'data' : result }, 201

@app.route('/numbers/<id>', methods=['PUT'])
def numbers_update():
    number = Numbers.query.get(id)
    original = request.json['original']

    number.original = original

    db.session.commit()
    return number_schema.jsonify(number)

@app.route('/numbers/<id>', methods=['DELETE'])
def number_delete(id):
    number = Numbers.query.get(id)
    db.session.delete(number)
    db.session.commit()

    return number_schema.jsonify(number)

@app.route('/users')
def users():
    result = Users.query.all()
    return render_template('users.html', result=result)

@app.route('/dog', methods=['GET'])
def get_dogs():
    # all_dogs = Dog.query.all()
    # result = dogs_schema.dump(all_dogs)
    result = Dog.query.all()
    return render_template('dog.html', result=result)
    # return "DOGS"
    # return jsonify(result.data)


if __name__ == '__main__':
    app.run(debug=True)
# @app.route('/')
# def main():
#     cnx = engine.connect()
#     cursor = cnx.execute('SELECT NOW() as now;')
#     result = cursor.fetchall()
#     current_time = result[0][0]
#     # If the connection comes from a pool, close() will send the connection
#     # back to the pool instead of closing it
#     cnx.close()
#
#     return str(current_time)

# @app.route('/numbers')
# def get_numbers():
#     cnx = engine.connect()
#     cursor = cnx.execute('SELECT * FROM numbers;')
#     result = cursor.fetchall()
#     cnx.close()
#     return str(result)
#
# @app.route('/users')
# def get_users():
#     cnx = engine.connect()
#     cursor = cnx.execute('SELECT * FROM users;')
#     result = cursor.fetchall()
#     cnx.close()
#     return str(result)














# import os
#
# from flask import Flask
# import pymysql
#
# db_user = os.environ.get('CLOUD_SQL_USERNAME')
# db_password = os.environ.get('CLOUD_SQL_PASSWORD')
# db_name = os.environ.get('CLOUD_SQL_DATABASE_NAME')
# db_connection_name = os.environ.get('CLOUD_SQL_CONNECTION_NAME')
#
# app = Flask(__name__)
#
# if os.environ.get('GAE_ENV') == 'standard':
#     # If deployed, use the local socket interface for accessing Cloud SQL
#     unix_socket = '/cloudsql/{}'.format(db_connection_name)
#     cnx = pymysql.connect(user=db_user, password=db_password,
#                           unix_socket=unix_socket, db=db_name)
# else:
#     # If running locally, use the TCP connections instead
#     # Set up Cloud SQL Proxy (cloud.google.com/sql/docs/mysql/sql-proxy)
#     # so that your application can use 127.0.0.1:3306 to connect to your
#     # Cloud SQL instance
#     host = '127.0.0.1'
#     cnx = pymysql.connect(user=db_user, password=db_password,
#                           host=host, db=db_name)
#
# @app.route('/')
# def numbers():
#     # When deployed to App Engine, the `GAE_ENV` environment variable will be
#     # set to `standard`
#     # with cnx.cursor() as cursor:
#     #     # cursor.execute('SELECT NOW() as now;')
#     #     cursor.execute('SELECT * FROM numbers;')
#     #     result = cursor.fetchall()
#     #     current_time = result[0][3]
#     # cnx.close()
#
#     with cnx.cursor() as cursor:
#         cursor.execute('SELECT NOW() as now;')
#         result = cursor.fetchall()
#         current_time = result[0][0]
#     cnx.close()
#
#     return str(current_time)
#
# @app.route('/numbers')
# def get_numbers():
#     with cnx.cursor() as cursor:
#         cursor.execute('SELECT * FROM numbers;')
#         result = cursor.fetchall()
#     cnx.close()
#     return str(result)
# # [END gae_python37_cloudsql_mysql]
#
#
# if __name__ == '__main__':
#     app.run(host='127.0.0.1', port=8080, debug=True)
#




# import os
#
# from flask import Flask, render_template
# import sqlalchemy
# from flask_sqlalchemy import SQLAlchemy
# import pymysql
#
# db_user = os.environ.get('CLOUD_SQL_USERNAME')
# db_password = os.environ.get('CLOUD_SQL_PASSWORD')
# db_name = os.environ.get('CLOUD_SQL_DATABASE_NAME')
# db_connection_name = os.environ.get('CLOUD_SQL_CONNECTION_NAME')
#
#
#     # If deployed, use the local socket interface for accessing Cloud SQL
# unix_socket = '/cloudsql/{}'.format(db_connection_name)
# engine_url = 'mysql+pymysql://{}:{}@/{}?unix_socket={}'.format(
#     db_user, db_password, db_name, unix_socket)
#
# app = Flask(__name__)
# app.config['SQLALCHEMY_DATABASE_URI'] = engine_url
# db = SQLAlchemy(app)
#
# class Numbers(db.Model):
#     id = db.Column(db.Integer, primary_key=True)
#     original = db.Column(db.Integer)
#     modified = db.Column(db.Integer)
#     random = db.Column(db.Float)
#
# @app.route("/")
# def index():
#     # I need to query the db for persisted posts
#     result = Numbers.query.all()
#     # return str(result)
#     # return "HELLO"
#     render_template('index.html', result=result)


# @app.route('/')
# def main():
#     cnx = engine.connect()
#     cursor = cnx.execute('SELECT NOW() as now;')
#     result = cursor.fetchall()
#     current_time = result[0][0]
#     # If the connection comes from a pool, close() will send the connection
#     # back to the pool instead of closing it
#     cnx.close()
#
#     return str(current_time)




























# import os
#
# from flask import Flask
# from flask_sqlalchemy import SQLAlchemy
# import pymysql
#
#
# db_user = os.environ.get('CLOUD_SQL_USERNAME')
# db_password = os.environ.get('CLOUD_SQL_PASSWORD')
# db_name = os.environ.get('CLOUD_SQL_DATABASE_NAME')
# db_connection_name = os.environ.get('CLOUD_SQL_CONNECTION_NAME')
#
# app = Flask(__name__)
#
#
# @app.route('/')
# def main():
#     # When deployed to App Engine, the `GAE_ENV` environment variable will be
#     # set to `standard`
#     if os.environ.get('GAE_ENV') == 'standard':
#         # If deployed, use the local socket interface for accessing Cloud SQL
#         unix_socket = '/cloudsql/{}'.format(db_connection_name)
#         cnx = pymysql.connect(user=db_user, password=db_password,
#                               unix_socket=unix_socket, db=db_name)
#     else:
#         # If running locally, use the TCP connections instead
#         # Set up Cloud SQL Proxy (cloud.google.com/sql/docs/mysql/sql-proxy)
#         # so that your application can use 127.0.0.1:3306 to connect to your
#         # Cloud SQL instance`322
#         host = '127.0.0.1'
#         cnx = pymysql.connect(user=db_user, password=db_password,
#                               host=host, db=db_name)
#
#     with cnx.cursor() as cursor:
#         # cursor.execute('SELECT NOW() as now;')
#         cursor.execute('SELECT * FROM numbers;')
#         result = cursor.fetchall()
#         current_time = result[0][3]
#     cnx.close()
#
#     return str(result)
#
#





# # app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+mysqldb://root@/data?unix_socket=/cloudsql/python3-app-test:mysql-python-app'
# app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://root:password@localhost/data?unix_socket=/cloudsql/python3-app-test:us-east4:mysql-python-app'
# db = SQLAlchemy(app)





# class Number(db.Model):
#     id = db.Column(db.Integer, primary_key=True)
#     original = db.Column(db.Integer)
#     modified = db.Column(db.Integer)
#     random = db.Column(db.Float)
#
# @app.route("/")
# def index():
#     # I need to query the db for persisted posts
#     result = Number.query.all()
#     # return str(result)
#     return "HELLO"
#
# if __name__ == '__main__':
#     app.run(debug=True)

# import datetime
#
# from flask import Flask, render_template
#
# app = Flask(__name__)
#
#
# @app.route('/')
# def root():
#     # For the sake of example, use static information to inflate the template.
#     # This will be replaced with real information in later steps.
#     dummy_times = [datetime.datetime(2018, 1, 1, 10, 0, 0),
#                    datetime.datetime(2018, 1, 2, 10, 30, 0),
#                    datetime.datetime(2018, 1, 3, 11, 0, 0),
#                    ]
#
#     return render_template('index.html', times=dummy_times)
#
#
# if __name__ == '__main__':
#     # This is used when running locally only. When deploying to Google App
#     # Engine, a webserver process such as Gunicorn will serve the app. This
#     # can be configured by adding an `entrypoint` to app.yaml.
#     # Flask's development server will automatically serve static files in
#     # the "static" directory. See:
#     # http://flask.pocoo.org/docs/1.0/quickstart/#static-files. Once deployed,
#     # App Engine itself will serve those files as configured in app.yaml.
#     app.run(host='127.0.0.1', port=8080, debug=True)
